AWSTemplateFormatVersion: 2010-09-09
Parameters:
  SearchLambdaName:
    Description: name of search lambda function from stage 1
    Type: String
    Default: search-photos-987
  IndexLambdaName:
    Description: name of index lambda function from stage 1
    Type: String
    Default: index-photos-987
  PhotoAlbumS3Name:
    Description: bucket for photos
    Type: String
    Default: smart-album-photos-987
  FrontendBranchName:
    Description: CodeCommit branch name
    Type: String
    Default: main
  FrontendRepositoryName:
    Description: CodeComit repository name
    Type: String
    Default: google-photos-frontend
  FrontendProjectName:
    Description: codebuild project name
    Type: String
    Default: google-photos-stage-2
  FrontendCodePipelineArtifactS3Name:
    Description: codepipeline artifact s3 bucket
    Type: String
    Default: codepipeline-artifacts-frontend-987
  FrontendBucketName:
    Type: String
    Default: smart-photo-album-frontend-987
  EsName:
    Type: String
    Default: smart-photo-album-es-987

Resources:
  SearchLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SearchLambdaName
      FunctionVersion: $LATEST
      Name: LatestVersion
  
  IndexLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref IndexLambdaName
      FunctionVersion: $LATEST
      Name: LatestVersion
  
  S3PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PhotoAlbumS3Name

  S3EventRule: 
    Type: AWS::Events::Rule
    DependsOn: 
      - S3PhotoBucket
    Properties: 
      Description: EventRule
      EventPattern: 
        source: 
          - aws.s3
        detail-type: 
          - AWS API Call via CloudTrail
        detail: 
          eventSource: 
            - s3.amazonaws.com
          eventName: 
            - PutObject
          requestParameters:
            bucketName:
                - !Ref PhotoAlbumS3Name
      State: ENABLED
      Targets: 
        - 
          Arn: !Ref IndexLambdaAlias
          Id: LambdaIndexFunction
        
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    DependsOn: IndexLambdaAlias
    Properties: 
      FunctionName: index-photos-987:LatestVersion
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt S3EventRule.Arn
  
  ApiExecutionRoleLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: apiExecutionRoleLambda
      Path: /
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSLambda_FullAccess

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: apigatewayrole
      Path: /
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: apigateways3policy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              Effect: Allow
              Action: s3:Put*
              Resource: "*"

  PermissionForApiGatewayToInvokeLambda: 
    Type: AWS::Lambda::Permission
    DependsOn: SearchLambdaAlias
    Properties: 
      FunctionName: !Ref SearchLambdaName
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"

  Api:
    Type: AWS::ApiGateway::RestApi
    DependsOn: 
      - ApiRole
    Properties:
      ApiKeySourceType: HEADER
      BinaryMediaTypes: 
        - image/png
        - image/jpeg
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Album Search application, built during the Cloud and Big Data course at Columbia University."
          version: "1.0.0"
          title: "Photo Album"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                type: "aws"
                uri: !Join ["",["arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",!Ref SearchLambdaAlias,"/invocations"]]
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n\"q\":\"$input.params('q')\"\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                credentials: !GetAtt ApiExecutionRoleLambda.Arn
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /upload:
            put:
              operationId: "uploadPhoto"
              produces:
              - "application/json"
              parameters:
              - name: "Bucket"
                in: "header"
                required: false
                type: "string"
              - name: "Key"
                in: "header"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/MODELe39312"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                type: "aws"
                credentials: !GetAtt ApiRole.Arn
                uri: "arn:aws:apigateway:us-east-1:s3:path//{bucket}/{key}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.path.key: "method.request.header.Key"
                  integration.request.path.bucket: "method.request.header.Bucket"
                passthroughBehavior: "when_no_match"
                httpMethod: "PUT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          MODELe39312:
            type: "object"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        x-amazon-apigateway-minimum-compression-size: 0
        x-amazon-apigateway-binary-media-types:
        - "image/png"
        - "image/jpeg"
        - "image/jpg"
      Description: A test API
      Name: google-photos-api

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: Api
    Properties:
      RestApiId: !Ref Api
      StageName: prod

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: prod
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 20
      UsagePlanName: Photo_Album_Plan
  
  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    Properties:
      Enabled: 'true'

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn: ApiUsagePlan
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
  
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FrontendBucketName
      PublicAccessBlockConfiguration: 
        BlockPublicPolicy: false
      WebsiteConfiguration: 
        IndexDocument: submit.html
    
  FrontendBucketPolicy:
    DependsOn: FrontendS3Bucket
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref FrontendBucketName
      PolicyDocument:
        Statement:
          - Action:
            - 's3:GetObject'
            Effect: Allow
            Principal: "*"
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: FrontendBucketName
                  - /*
  
  FrontendCodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref FrontendCodePipelineArtifactS3Name

  FrontendCodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn:
      - FrontendCodePipelineArtifactStoreBucket
    Properties:
      Bucket: !Ref FrontendCodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - FrontendCodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - FrontendCodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false


  FrontendAmazonCloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: frontend-cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref FrontendAppPipeline

  FrontendAmazonCloudWatchEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Join 
            - ''
            - - 'arn:aws:codecommit:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref FrontendRepositoryName
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Targets:
        - Arn: !Join 
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref FrontendAppPipeline
          RoleArn: !GetAtt 
            - FrontendAmazonCloudWatchEventRole
            - Arn
          Id: frontend-codepipeline-AppPipeline

  FrontendCodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Frontend-AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'devicefarm:ListProjects'
                  - 'devicefarm:ListDevicePools'
                  - 'devicefarm:GetRun'
                  - 'devicefarm:GetUpload'
                  - 'devicefarm:CreateUpload'
                  - 'devicefarm:ScheduleRun'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                Resource: '*'


  FrontendAppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Ref FrontendProjectName
      RoleArn: !GetAtt 
        - FrontendCodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref FrontendBranchName
                RepositoryName: !Ref FrontendRepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Release
          Actions:
            - Name: DeployFrontend
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                BucketName: !Ref FrontendBucketName
                Extract: true
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref FrontendCodePipelineArtifactStoreBucket
  
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Ref EsName 
      ElasticsearchClusterConfig:
        InstanceCount: "1"
        InstanceType: "t2.small.elasticsearch"
      ElasticsearchVersion: "7.8"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: "gp2"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS:
                - arn:aws:iam::024303554171:role/searchLambdaRole
                - arn:aws:iam::024303554171:role/indexLambdaRole
            Action: "es:*"
            Resource: !Join ["",["arn:aws:es:us-east-1:024303554171:domain/",!Ref EsName,"/*"]]